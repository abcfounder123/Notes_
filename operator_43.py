
"""

Python built-in operators ( 43 )

Arithmetic operator ကိုးမျိုး 

1. Exponentiation

ထပ်ကိန်းတင်တာကို ပြောတာဖြစ်ပါတယ်။

ထပ်ကိန်းဆိုတာက အကြိမ်ကြိမ် အထပ်ထပ် မြှောက်မယ့် အရေအတွက် ဖြစ်ပါတယ်။

################################################

မြင်သာအောင်‌ ပြောရရင် နှစ်ရဲ့ ထပ်ကိန်းဟာ ရှစ်ဖြစ်ခဲ့မယ်ဆိုရင် နှစ်ကို ရှစ်ကြိမ်မြှောက်ရမှာ ဖြစ်ပါတယ်။

################################################

သင်္ကေတက asterisk နှစ်ခုပူး ဖြစ်ပါတယ်။ ( ** )

################################################

အသုံးပြုနည်းက base ** exponent ဖြစ်ပါတယ်။

base ဆိုတာက မူလရှိထားတဲ့ တန်ဖိုးပါ။

exponent ကတော့ ထပ်ကိန်း ဖြစ်ပါတယ်။

################################################

ဒါကတော့ နှစ် ရှစ်ထပ် ဖြစ်ပါတယ်။

2 ** 8 

နှစ်ရှစ်ထပ်ကို တွေ့တဲ့အခါ  စိတ်ထဲမှာ အောက်ပါအတိုင်း နှစ်ကို ရှစ်ကြိမ် အထပ်ထပ် မြှောက်ထားတယ်ဆိုတာမျိုး ပုံဖော်နိုင်ရပါမယ်။

2 * 2 * 2 * 2 * 2 * 2 * 2 * 2

################################################

2. Unary minus 

ရှင်းပြခဲ့ပြီးသားဖြစ်ပါတယ်။

################################################

3. Unary plus

ရှင်းပြခဲ့ပြီးသားဖြစ်ပါတယ်။

################################################

4. Multiplication

အကြိမ်ကြိမ်‌ပေါင်းတာ ဖြစ်ပါတယ်။

နှစ် အမြှောက် ရှစ် ဆိုရင် နှစ်ကို ရှစ်ကြိမ်ပေါင်းရမှာ ဖြစ်ပါတယ်။

နှစ်ကို ရှစ်ခါပေါင်းရင် 16 ရမှာဖြစ်ပါတယ်။

################################################

Python မှာ "နှစ် အမြှောက် ရှစ်" ကို 2 * 8 ဆိုပြီး ရေးပါတယ်။

သင်္ကေတက asterisk တစ်ခု ဖြစ်ပါတယ်။

################################################

5. Division 

အစားကို ပြောတာပါ။

အမြှောက်နဲ့ ဆန့်ကျင်ဘက်ဖြစ်ပါတယ်။

သင်္ကေတက forward slash ( / ) ဖြစ်ပါတယ်။

slash အမှတ်အသားက ရှေ့ကို ယိုင်နေလို့ forward slash လို့ ပြောတာ ဖြစ်ပါတယ်။

နောက်ကို ယိုင်တာနဲ့ မှားတတ်ပါတယ်။

################################################

16 / 2 ဆိုပြီး စားခိုင်းတဲ့အခါ 16 ရဖို့ 2 ကို ဘယ်နှစ်ကြိမ်ပေါင်းရမလဲ တွက်ခိုင်းတာ ဖြစ်ပါတယ်။

16 ရဖို့အတွက် နှစ်ကို ရှစ်ကြိမ်ပေါင်းဖို့ လိုအပ်တာဖြစ်လို့ အဖြေက 8 ဖြစ်ပါမယ်။

################################################

6. Floor Division

floor ဆိုတာက ကြမ်းပြင်ကို ပြောတာပါ။

division ကတော့ အစားကို ပြောတာပါပဲ။

သင်္ချာမှာ floor နဲ့ ceiling ဆိုပြီး ကြမ်းပြင်နဲ့ မျက်နှာကြက် ၊ အနိမ့်နဲ့ အမြင့် ၊ အနည်းနဲ့အများ ဆိုတာမျိုး သုံးလေ့ ရှိကြပါတယ်။

မူလတန်ဖိုးထက် နည်းတဲ့တန်ဖိုးကို floor လို့ ခေါ်ပြီး ပိုများနေရင်တော့ ceiling လို့ ခေါ်ကြပါတယ်။

################################################

ရိုးရိုး အစားမှာ 16 ရဖို့အတွက် နှစ်ကို ရှစ်ကြိမ်ပေါင်းဖို့ လိုအပ်တာဖြစ်လို့ အဖြေက 8 ဖြစ်ပါမယ်။

17 ရဖို့အတွက်ဆိုရင်တော့ နှစ်ကို ရှစ်ကြိမ်နဲ့ တစ်ဝက်ပေါင်းဖို့ လိုအပ်တာဖြစ်လို့ အဖြေက 8.5 ဖြစ်ပါမယ်။

ကိန်းပြည့်တန်ဖိုးအဖြစ်ပဲ လိုချင်ခဲ့ရင် decimal အစိတ်အပိုင်းကို ဖြတ်ချပြီး နည်းတဲ့တန်ဖိုး 8 ကို ယူလိုက်နိုင်သလို့ 

 round လုပ်ပြီး ပိုနီးစပ်တဲ့ 9 ကို ယူလို့လည်း ရပါတယ်။

################################################

floor division ကတော့ floor တန်ဖိုးကို ယူတာဖြစ်လို့ 8 ကို ယူပါတယ်။

စားတဲ့အခါ ပိုနည်းတာကို ယူလိုက်တာပေါ့။

မြန်မာလို့ စားလဒ်လို့ ခေါ်ပါတယ်။

################################################

သင်္ကေတက double slash ( // ) ပါ။

17 ကို နှစ်နဲ့စားပြီး စားလဒ်ပဲ ယူချင်ရင် Python မှာ 17 // 2 ဆိုပြီး ရေးနိုင်ပါတယ်။

################################################

7. Modulus

သူက‌လည်း အစားပါပဲ။

ဒါပေမယ့် အကြွင်းကို ယူပါတယ်။

အကြွင်းဆိုတာက စားတဲ့အခါ အကြိမ်အရေအတွက် အတိအကျနဲ့ အပြတ်မစားနိုင်ပဲ ကြွင်းကျန်နေသော တန်ဖိုးလို့ အဓိပ္ပါယ်ရပါတယ်။

အကြွင်းရှာဖို့ အတွက် percent symbol ( % )ကို သုံးပါတယ်။

17 ကို နှစ်နဲ့စားပြီး အကြွင်းပဲယူချင်ရင် Python မှာ 17 % 2 ဆိုပြီး ရေးနိုင်ပါတယ်။

################################################

အစားသုံးခုကို အနှစ်ချုပ်ရရင် 

17 ကို နှစ်နဲ့စားရင် စားလဒ်က 8 ဖြစ်ပြီး အကြွင်းက 1 ဖြစ်ပါတယ်။

စားလဒ်ရှာတဲ့(floor division) က စားလဒ်တန်ဖိုးဖြစ်တဲ့ ရှစ်ကို ယူမှာဖြစ်ပြီး 

အကြွင်းရှာတဲ့(modulus) ကတော့ တစ်ကို ယူမှာဖြစ်ပါတယ်။

ရိုးရိုးအစား(division) ကတော့ 8.5 ဆိုပြီး အပြတ်စားလိုက်မှာ ဖြစ်ပါတယ်။

################################################

8. Addition

ရှင်းပြခဲ့ပြီးသား ဖြစ်ပါတယ်။

################################################

9. Subtraction

ရှင်းပြခဲ့ပြီးသား ဖြစ်ပါတယ်။

################################################

အနှစ်ချုပ်ရရင်တော့ ကျောင်းမှာ သင်ခဲ့တာတွေပဲဖြစ်လို့ ထူးထူးခြားခြား မရှိပါဘူး။

သင်္ကေတတွေနဲ့ အခေါ်အဝေါ်လေးတွေတော့ အလွတ်ရ‌အောင် မှတ်ထားပေးပါ။

################################################

မှတ်ရလွယ်အောင် မှတ်စုထုတ်ပေးထားပါတယ်။ 

1. Exponentiation ( ** ) ( double asterisk )

2. Unary minus ( -1 ) ( negative ) ( negative 1 လို့ ဖတ်ရမှာ ဖြစ်ပါတယ်။ )

3. Unary plus ( +1 ) ( positive )

4. Multiplication ( * ) ( asterisk )

5. Division ( / ) ( forward slash )

6. Floor Division ( // ) ( double slash )

7. Modulus ( % ) ( percent )

8. Addition ( + ) ( plus )

9. Subtraction ( - ) ( minus ) ( 2 - 1 ကို two minus one လို့ ဖတ်ရမှာဖြစ်ပါတယ်။ )

################################################
################################################

Precedence of arithmetic operators 

အလွတ်ကျက်ခိုင်းခဲ့တဲ့ "e u မြှောက်စား ပေါင်းနှုတ်" မှာ 

e  / u / မြှောက်စား / ပေါင်းနှုတ် ဆိုပြီး space ခြားထားတာတွေကို သီးခြားစီ နားပြီး ရွတ်ရပါမယ်။

ဒါဆိုရင် ဦးစားပေးအဆင့်လေးခုကို မှတ်မိပါပြီ။

################################################

တစ်ခုခုကို အလွတ်ရထားရင် ကျန်တာတွေလည်း အလိုလိုရလာတာဖြစ်လို့ ကျက်ခိုင်းရင် ကျက်လိုက်ပါ။

ဆင်ခြေပေးတတ်ရင် စာမတတ်ပါဘူး။

################################################

စာတွေဟာ ဆက်စပ်နေကြတာဖြစ်လို့ ရှေ့မှာသင်ခဲ့သမျှက နောက်သင်ခန်းစာတွေအတွက် လောင်စာတွေ ဖြစ်ပါတယ်။

အဆင့်အလိုက် ထောက်ပံ့ရင်း ဒုံးကျည်လွှတ်သလိုမျိုး သင်ရင်းနဲ့ မြန်လာရတာမျိုးဖြစ်ပါတယ်။

################################################

သင်ရင်းနဲ့ လွယ်လာရတာမျိုး ပျော်လာရတာမျိုးပေါ့။

ဒါကြောင့်သာ စာတော်တဲ့ကျောင်းသားတွေဟာ မပျင်းမရိနဲ့ စာလုပ်နိုင်ကြတာဖြစ်ပါတယ်။

ဒီလိုနဲ့ပဲ တော်တဲ့သူက ပိုတော်သွားကြပါတယ်။

################################################

ဘယ်သူမှတော့ ဘာခံစားချက်မှမရပဲ တစ်နေကုန် စာထိုင်မလုပ်ပါဘူး။

ကျွန်တော်ဆိုရင်လည်း စာရေးရင် စိတ်ဖိအားတွေလျော့ပြီး အနာသက်သာတယ်ခံစားရ‌လို့ ရေးနေတာပါ။

စာအုပ်ဝယ်ရင် ပိုက်ဆံရတာကြောင့်လည်း ပါတာပေါ့။

ပိုက်ဆံကို စက္ကူလို့ပဲ သဘောထားပေမယ့် ပိုက်ဆံရမှသာ အိမ်လခနဲ့ ဆေးရုံတက်တာတွေ ဆိုင်ကယ်ဝယ်တာတွေ လုပ်လို့ရမှာကိုး။

################################################

သင်ခန်းစာကို ပြန်သွားပြီး ထပ်ရှင်းရရရင် 

1. ပထမဦးစားပေးက exponent ဖြစ်ပါတယ်။

2. ဒုတိယဦးစားပေးက unary plus နဲ့ unary minus ဖြစ်ပါတယ်။

3. တတိယဦးစားပေးက အမြှောက်နဲ့ အစားသုံးခု ဖြစ်ပါတယ်။

4. စတုတ္ထဦးစားပေးက အပေါင်းနဲ့ အနှုတ်ဖြစ်ပါတယ်။

################################################

မြင်သာအောင် ဥပမာပေးရရင် 

ပထမဦးစားပေးဖြစ်တဲ့ exponent က သမ္မတအဆင့်အတန်းလို့ ဆိုကြပါစို့။

ဒါဆိုရင် ဒုတိယဦးစားပေးဖြစ်တဲ့ unary plus နဲ့ unary minus ကတော့ ဒုသမ္မတနှစ်ယောက်ဖြစ်ပါမယ်။

တတိယဦးစားပေး လေးခုကတော့ ဝန်ကြီးလေးယောက်ပေါ့။

စတုထ္ထဦးစားပေး နှစ်ခုကတော့ ဒုဝန်ကြီးပေါ့။

ဖြေရှင်းကြရတဲ့အခါ သမ္မတနဲ့ ဒုသမ္မတအတူတူလာခဲ့ရင် ဘယ်သူ့ကို အရင်ကြိုရမလဲဆိုတာမျိုး တွေးနိုင်ပါတယ်။

################################################

Example.1    --->   2 * 2 ** 3

exponentiation operator နဲ့ multiplication operator ဆိုပြီး operator နှစ်ခု ပါဝင်နေပါတယ်။

ထုံးစံအတိုင်း ရွေးစရာနှစ်ခု ဖြစ်လာပါတယ်။

ပထမနည်းကတော့ exponentiationကို ဦးစားပေးပြီး အရင်ဖြေရှင်းတာ ဖြစ်ပါတယ်။

2 * 2 ** 3 

>>   2 * 8

>>   256

################################################

ဒုတိယနည်းကတော့ multiplication ကို ဦးစားပေးပြီး အရင်ဖြေရှင်းတာ ဖြစ်ပါတယ်။

2 * 2 ** 3 

>>   4 ** 3

>>   64

################################################

exponentiation ကို အရင်ရှင်းခဲ့ရင်  256 ရမှာဖြစ်ပြီး multiplication ကို အရင်ရှင်းခဲ့ရင်တော့ 64 ရမှာဖြစ်ပါတယ်။

################################################

ဒုသမ္မတနှစ်ယောက်လိုမျိုး ရာထူးတူတာလာခဲ့ရင် ဘယ်သူ့ကို ဦးစားပေးရမလဲဆိုတာမျိုးကြတော့ associativity ဆိုပြီး ထပ်ရေးပေးပါ့မယ်။

associativity ဆိုတာကတော့ အဆင့်တူအချင်းချင်းကြားက ဆက်စပ်မှု ဖြစ်ပါတယ်။

################################################

Exercise.1

Example.1 ကို ဖြေရှင်းရတဲ့အခါ

Python က ဘယ် operator ကို ဦးစားပေးပြီး အရင်ဖြေရှင်းမယ်ထင်ပါသလဲ။

ဘယ်နည်းကို ရွေးချယ်မယ်လို့ ထင်ပါသလဲ။

################################################

Exercise.2 

အဆင့်လေးဆင့်‌ထဲက တစ်ခုစီပါအောင် ကိုယ့်ဘာသာ မေးခွန်းထုတ်ပြီး အဆင့်အလိုက် တွက်ကြည့်ပါ။

တွက်ထားတာကို comment မှာ ရေးခဲ့ပေးပါ။

################################################

Exercises တွေ မဖြေပဲ နောက်စာတွေကို နားလည်မှာ မဟုတ်ပါဘူး။

ဖြေလိုက်မှသာ တွေးမိသွားပြီး ကြားဖူးနားဝအဆင့်ကနေ ကိုယ်ပိုင်ဉာဏ်ဖြစ်သွားမှာ ဖြစ်ပါတယ်။

################################################

operator က ငါးဆယ်လောက်ရှိတာ ဖြစ်ပါတယ်။

တစ်ခုချင်းစီကို အဆင့်အလိုက် လွယ်အောင် ရေးထားတာဖြစ်လို့ လွယ်ချင်ရင် တစ်ခုချင်း အပိုင်မှတ်သွားပါ။

################################################
################################################

Associativity 

အဆင့်တူအချင်းချင်းကြားက ပတ်သတ်မှုကို ပြောတာဖြစ်ပါတယ်။

################################################

တစ်ခုသတိထားရမှာက ဒီစာတွေဟာ သင်္ချာသင်နေတာမဟုတ်ပဲ Python သင်နေတာသာ ဖြစ်ပါတယ်။

Operator တွေနဲ့ ပတ်သတ်ပြီး Python က ဘယ်လို ဘာသာပြန်နေလဲဆိုတာကို ရှင်းရှင်းလင်းလင်း နားလည်စေဖို့ ရည်ရွယ်ရေးသားထားခြင်းသာ ဖြစ်ပါတယ်။

################################################

သင်ခန်းစာကို ပြန်ကောက်ရရင် အဆင့်တူအချင်းချင်းကြားက ပတ်သတ်မှုကို မှတ်ဖို့အတွက် တူညီတဲ့ အဆင့်တွေကို အရင်သိထားရမှာဖြစ်ပါတယ်။

မှတ်စရာ တစ်ခုတည်းရှိပြီး တော်တော်လေးလွယ်ပေမယ့်လည်း အများစုက‌တော့ အဆင့်တွေကို ဝေဝါးပြီး အမှတ်မှားတတ်ကြပါတယ်။

################################################

ရှေ့သင်ခန်းစာမှာ operator ကိုးမျိုးရဲ့ အဆင့်တွေကို ရှင်းပြခဲ့ပါတယ်။

1.  ပထမဦးစားပေးက exponent ဖြစ်ပါတယ်။

2. ဒုတိယဦးစားပေးက unary plus နဲ့ unary minus ဖြစ်ပါတယ်။

3. တတိယဦးစားပေးက အမြှောက်နဲ့ အစားသုံးခု ဖြစ်ပါတယ်။

4. စတုတ္ထဦးစားပေးက အပေါင်းနဲ့ အနှုတ်ဖြစ်ပါတယ်။

စုစုပေါင်း အဆင့်လေးဆင့်ရှိပြီး သမ္မတ ၊ ဒုသမ္မတ ၊ ဝန်ကြီးနဲ့ ဒုဝန်ကြီးဆိုတာမျိုး ဥပမာပေးခဲ့ပါတယ်။

################################################

exponent ကို ဥပမာပေးပြီး ရှင်းပြရရင် ကုလသမ္မဂမှာ သမ္မတနှစ်ယောက် လာတယ်ဆိုပါစို့။

အမေရိကန်သမ္မတနဲ့ တစ်ခြားနိုင်ငံငယ်တစ်ခုခုက သမ္မတဆိုရင် ဘယ်သူ့ကို ဦးစားပေးမယ် ထင်ပါသလဲ။

စည်းမျဉ်းအရတော့ ဗီတိုအာဏာကိုင်ဆွဲထားတဲ့ အမေရိကန်သမ္မတကို ဦးစားပေးရပါလိမ့်မယ်။

ဆိုလိုတာက သမ္မတအချင်းချင်း ရာထူးတူရင်တောင် ဘယ်သူ့ကိုဦးစားပေးမယ်ဆိုတာမျိုး ရှိနေပါသေးတယ်။

ခင်တဲ့သူ ၊ ချစ်တဲ့သူ ၊ အာဏာရှိတဲ့သူ ၊ တာဝန်ရှိတဲ့သူ စသဖြင့် ဦးစားပေးမှု စည်းမျဉ်းတွေ အများကြီး ရှိကြပါတယ်။

################################################

Python မှာကတော့ စည်းမျဉ်းတစ်ခုပဲ ရှိပါတယ်။

အဆင့်တူနေရင် left sided bind / right sided bind ဆိုတဲ့ စည်းမျဉ်းတစ်ခုတည်းနဲ့ ဖြေရှင်းပါတယ်။

################################################

left sided bind 

left sided ဆိုတာက ဘယ်ဘက်ကို ပြောတာပါ။

bind ဆိုတာက သင်္ချာမှာ ဖြေရှင်းတာကို ‌ဆိုလိုပါတယ်။

left sided bind ဆိုတော့ ဘယ်ဘက်ကို အရင်ဖြေရှင်းတာ‌လို့ အဓိပ္ပါယ်ရပါတယ်။

################################################

right sided bind

right sided bind ကြတော့လည်း ညာဘက်ကို အရင်ဖြေရှင်းတာ‌လို့ အဓိပ္ပါယ်ရပါတယ်။

################################################

Example.1    --->   2 ** 2 ** 3

ထုံးစံအတိုင်း ရွေးစရာနှစ်ခု ရှိလာပါတယ်။

choice.1 ( ဘယ်ဘက်ကို အရင်ရှင်း )

2 ** 2 ** 3

>> 4 ** 3

>> 64

################################################

choice.2 ( ညာဘက်ကို အရင်ရှင်း )

2 ** 2 ** 3

>> 2 ** 8

>> 256

################################################

ဘယ်ဘက်ကို အရင်ရှင်းခဲ့ရင် 64 ရမှာဖြစ်ပြီး ညာဘက်ကို အရင်ရှင်းခဲ့ရင် 256 ရမှာဖြစ်ပါတယ်။

################################################

ပထမဦးစားပေးဖြစ်တဲ့ exponent တွေကို  Python မှာ right sided bind လို့ သတ်မှတ်ထားပါတယ်။ 

ဒါကြောင့် choice.2 အတိုင်း ဖြေရှင်းပါလိမ့်မယ်။

################################################

Operator အခုငါးဆယ်လောက်ကို အဆင့်အလိုက်စီပြီး ရာထူးပေးလိုက်ရင် ဆယ့်ငါးဆင့်လောက် ထွက်လာမှာဖြစ်ပြီး အဆင့်တစ်ခုချင်းစီမှာ left sided bind နဲ့ right sided bind ဆိုပြီး သီးခြားစီ ရှိနေကြပါတယ်။

တစ်ချို့အဆင့်တွေက အဆင့်တူနေရင် ဘယ်ကစပြီးဖြေရှင်းမှာဖြစ်ပြီး တစ်ချို့တွေကတော့ ညာဘက်က စကြပါတယ်။

အဆင့်တွေကို အလွတ်ရဖို့လိုအပ်သလို အဆင့်တစ်ခုစီရဲ့ Associativity တွေကိုလည်း သိထားရမှာဖြစ်ပါတယ်။

################################################

စာတစ်တန်ပေတစ်တန်နဲ့ ရေးနေရလို့သာ ရှုတ်နေပေမယ့် အသုံးများတဲ့ operator တွေထဲမှာတော့ exponent နဲ့ assignment operator တွေကလွဲလို့ ကျန်တာအားလုံးက left sided bind ဆိုတာမျိုး မှတ်ထားနိုင်ပါတယ်။

ခြုံပြီး မှတ်ရမှာဖြစ်လို့ Operator အားလုံးသင်ပြီးမှပဲ ပြန်ပြီး အနှစ်ချုပ်ပေးပါ့မယ်။

################################################
################################################

15. Exercise of precedence & associativity 

1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - 2 ** 3

အထက်ပါ exercise တွင်  ( +, *, - , %, * , /, *, // ,  -, **  ) ဟူ၍ operator စုစုပေါင်း ဆယ်ခု ပါဝင်ပါသည်။

ထိုဆယ်ခုတွင် မတူညီသော အဆင့် သုံးမျိုး ပါဝင်ပါသည်။

################################################

ထိုဆယ်ခု၏ အဆင့်များမှာ

အဆင့်တစ်ဖြစ်သော exponent တစ်ခု ၊

အဆင့်သုံးဖြစ်သော အမြှောက် သုံးခုနှင့် အစားသုံးခု (စုစုပေါင်း ခြောက်ခု) ၊

အဆင့်လေးဖြစ်သော အပေါင်းတစ်ခုနှင့် အနှုတ် နှစ်ခု (စုစုပေါင်း သုံးခု) 

စသည်တို့ ဖြစ်ကြပါသည်။ 

################################################

အဆင့်တစ်တစ်ခု ၊ အဆင့်သုံးခြောက်ခုနှင့် အဆင့်လေးသုံးခု စုစုပေါင်း operator ဆယ်ခုကို step သုံးခုခွဲ၍ ရှင်းပြပေးပါ့မယ်။

################################################

step.1

ပထမဦးစားပေး အဆင့်တစ်ဖြစ်သော  exponent ကို အရင်ဖြေရှင်းပါမည်။ 

2 ** 3 ကို ဖြေရှင်းပြီး ရလာသော အဖြေ 8 ကို အစားထိုးပါမည်။

1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - (2 ** 3)

>>   1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - 8

################################################

step.2 

ဒုတိယဦးစား‌ပေးရမည့် unary plus/ minus များမပါဝင်သဖြင့် တတိယဦးစားပေးဖြစ်သော အ‌မြှောက်သုံးခုနဲ့ အစားသုံးမျိုးကို ဖြေရှင်းပါမည်။

အမြှောက်နှင့် အစားများသည် အဆင့်တူနေကြသဖြင့် အဆင့်တူအချင်းချင်းကြားက ပတ်သတ်မှု ( associativity ) အရ ဖြေရှင်းပါမည်။

တတိယဦးစားပေးဖြစ်သော အမြှောက်အစားများ၏ Associativity မှာ left sided bind ဖြစ်သဖြင့် ဘက်ဘက်စွန်းမှစ၍ တစ်ခုချင်းဖြေရှင်းပါမည်။

1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - 8

################################################

step.2.1   --->   ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 2 * 3 ကို ဖြေရှင်းသည်။

1 + (2 * 3) - 4 % 5 * 6 / 7 * 8  // 9 - 8

>> 1 + 6 - 4 % 5 * 6 / 7 * 8  // 9 - 8

################################################

step.2.2   --->   အဖြေ၏ ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 4 % 5  ကို ဖြေရှင်းသည်။ အကြွင်း 4 ရပါမည်။

1 + 6 - (4 % 5) * 6 / 7 * 8  // 9 - 8

>> 1 + 6 - 4 * 6 / 7 * 8  // 9 - 8

################################################

step.2.3   --->   အဖြေ၏ ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 4 * 6 ကို ဖြေရှင်းသည်။  24 ရပါမည်။

1 + 6 - (4 * 6) / 7 * 8  // 9 - 8

>  1 + 6 - 24  / 7 * 8  // 9 - 8

################################################

step.2.4   --->   အဖြေ၏ ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 24 / 7 ကို ဖြေရှင်းသည်။ 

အပြတ်စားသည့်အခါ float တန်ဖိုးကိုသာ ပေးမည်ဖြစ်သဖြင့် 3.4285714285714284 ရပါမည်။

1 + 6 - (24  / 7) * 8  // 9 - 8

>> 1 + 6 -  3.4285714285714284 * 8  // 9 - 8

################################################

step.2.5   --->   အဖြေ၏ ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော  3.4285714285714284 * 8 ကို ဖြေရှင်းသည်။ 

data အမျိုးအစားမတူသဖြင့် right operand ကို float ပြောင်းပြီး မြှောက်ရာမှ 27.428571428571427 ရပါမည်။

1 + 6 -  (3.4285714285714284 * 8)  // 9 - 8

>> 1 + 6 - 27.428571428571427 // 9 - 8

################################################

step.2.6   --->   အဖြေ၏ ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 27.428571428571427 // 9 ကို ဖြေရှင်းသည်။ 

data အမျိုးအစားမတူသဖြင့် right operand ကို float ပြောင်းပြီး စားရာမှ စားလဒ် 3.0 ရပါမည်။

1 + 6 - (27.428571428571427 // 9) - 8

>> 1 + 6 - 3.0 - 8

################################################

step.3

ဦးစားပေးမှု အဆင့်လေးဖြစ်သော အပေါင်းတစ်ခုနှင့် အနှုတ် နှစ်ခုကို ဖြေရှင်းပါမည်။
 
စတုတ္ထဦးစားပေးဖြစ်သော အပေါင်းအနှုတ်များ၏ Associativity မှာ left sided bind ဖြစ်သဖြင့် ဘက်ဘက်စွန်းမှစ၍ တစ်ခုချင်းဖြေရှင်းပါမည်။

1 + 6 - 3.0 - 8

################################################

step.3.1   --->   ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 1 + 6 ကို ဖြေရှင်းသည်။

(1 + 6) - 3.0 - 8

>> 7 - 3.0 - 8

################################################

step.3.2   --->   ဘက်ဘက်တွင် ပထမဆုံးတွေ့သော 7 - 3.0 ကို ဖြေရှင်းသည်။

data အမျိုးအစားမတူသဖြင့် left operand ကို float ပြောင်းပြီး နှုတ်ရာမှ 4.0 ရပါမည်။

(7 - 3.0) - 8

>> 4.0 - 8

################################################

step 3.3

4.0 - 8 ကို ဖြေရှင်းရာ data အမျိုးအစားမတူသဖြင့် right operand ကို float ပြောင်းပြီး နှုတ်ရာမှ - 4.0 ရပါမည်။

(4.0 - 8)

>> - 4.0

################################################

Python သည် implicit type casting ၊ precedence နှင့် associativity စသည်တို့ကို အသုံးပြု၍ အထက်ပါအတိုင်း ဖြေရှင်းသွားမည်ဖြစ်ပါသည်။

################################################

ဒါတွေ မတွက်တတ်လည်း ရေးလို့ရပေမယ့် Python ရဲ့ ဖြေရှင်းပုံကို အသေးစိတ် နားလည်ထားခဲ့ရင်တော့ အရေးအကြောင်းဆိုရင် ချက်ချင်းဖြေရှင်းနိုင်မှာပဲ ဖြစ်ပါတယ်။

################################################

operator ဆယ်ခုရဲ့ ဖြေရှင်းပုံ အဆင့်ဆင့်ကို စာမပါပဲ ရှင်းပြရရင် ဒီလိုဖြစ်ပါမယ်။

1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - 2 ** 3

1. 1 + 2 * 3 - 4 % 5 * 6 / 7 * 8  // 9 - (2 ** 3)

2. 1 + (2 * 3) - 4 % 5 * 6 / 7 * 8  // 9 - 8

3. 1 + 6 - (4 % 5) * 6 / 7 * 8  // 9 - 8

4. 1 + 6 - (4 * 6) / 7 * 8  // 9 - 8

5. 1 + 6 - (24  / 7) * 8  // 9 - 8

6. 1 + 6 -  (3.4285714285714284 * 8)  // 9 - 8

7. 1 + 6 - (27.428571428571427 // 9) - 8

8. (1 + 6) - 3.0 - 8

9. (7 - 3.0) - 8

10. (4.0 - 8)

Anaswer : -4

################################################

ရေးတဲ့အခါ ကိုယ်တိုင်တွက်ဖို့ မလိုအပ်ပေမယ့်

Procedural programming ကို လေ့လာနေရတာဖြစ်ပြီး  ကွန်ပြူတာကို အတိအကျ အစီအစဉ်ချပြီး ထိန်းချုပ်ရမှာဖြစ်လို့ 

Python ဘယ်လို အလုပ်လုပ်နေလဲ / computer ဘယ်လိုအလုပ်လုပ်နေလဲ ဆိုတာကို အတိအကျနီးပါး ခန့်မှန်းနိုင်နေရမှာ ဖြစ်ပါတယ်။

################################################

Exercises အနေနဲ့ ကိုယ့်ဘာသာ ရေးချင်ရာ ငါးပုဒ်ရေးပြီး အဆင့်အလိုက် စာမပါပဲ ဖြေရှင်းပါ။

အခု exercise ကိုလည်း တစ်ကနေ ကိုးအထိ အစဉ်လိုက်ရေးပြီး operator ဆယ်ခုကို ကြုံသလို ထည့်ထားပြီး ဖြေရှင်းပြထားတာ ဖြစ်ပါတယ်။

သင်တန်းသားတွေကတော့ operator ခြောက်ခုလောက်ဆိုရင် ရပါပြီ။

################################################
################################################

Bitwise Operators

Bit (binary digit) နဲ့ သက်‌ဆိုင်သော operator များလို့ အဓိပ္ပါယ်ရပါတယ်။

binary digit တွေနဲ့ ပတ်သတ်ပြီး operation တွေပြုလုပ်ဖို့ သုံးပါတယ်။

စုစုပေါင်း ခြောက်ခု ရှိပါတယ်။

################################################

1. Left shift ( << )

left က ဘယ်ဘက်ဖြစ်ပြီး shift ကတော့ ရွေ့တာကို ဆိုလိုပါတယ်။

binary digit တွေကို ဘယ်ဘက်ကို ရွေ့စေချင်ရင် သုံးပါတယ်။

ဘယ်ဘက်ကို ရွှေ့တဲ့အခါ ညာဘက်စွန်းကို zero ဖြည့်ပေးပါတယ်။

လက်တွေ့ပြရရင် 

00001011 ကို ဘယ်ဘက်ကို တစ်နေရာ ရွှေ့ခဲ့ရင် 00010110 ဖြစ်သွားပါမယ်။

>>   00001011
>> 000010110

အပေါ်ကလိုမျိုး ရှစ်ခုလုံးကို ဘယ်ဘက်ကို ရွှေ့လိုက်ပြီး ညာဘက်မှာ zero ဝင်လာပါမယ်။

ဒီနေရာမှာ ထိုင်ခုံမလောက်တဲ့ ပြသနာတစ်ခုတော့ ရှိပါတယ်။

လူရှစ်ယောက်က ထိုင်ခုံရှစ်ခုံမှာ ထိုင်နေရင်းကနေ ညာဘက်အစွန်က ထိုင်ခုံကို အလွတ်ထားဖို့အတွက် ဘယ်ဘက်ကို တစ်နေရာစီရွှေ့ခဲ့ရင် ဘယ်ဘက်စွန်းလူအတွက် ထိုင်ခုံမရှိတော့ပါဘူး။

left shift လုပ်တဲ့အခါမှာလည်း computer မှာ binary digit ရှစ်ခုပဲ လက်ခံဖို့ရည်ရွယ်ထားခဲ့ရင် ရှစ်ခုပဲ မှတ်သားပေးမှာဖြစ်လို့ နေရာမရှိတဲ့ ဘယ်အစွန်တစ်ခုက အထုတ်ခံရပါလိမ့်မယ်။

>>   00001011
>>   00010110

################################################

အထုတ်ခံရတာကို ပိုမြင်အောင် ဥပမာ ထပ်ပေးပါ့မယ်။

1011 ကို ဘယ်ဘက်ရွှေ့တဲ့အခါ အောက်ကလိုရပါတယ်။

>>   1011
>> 10110

computer က binary digit လေးခုပဲ ယူခဲ့မယ်ဆိုရင် ဘယ်အစွန်က နေရာမရှိသူ ဖယ်ထုတ်ခံရပါမယ်။

>>   1011
>>   0110

################################################

2. Right shift ( >> )

right က ညာဘက်ဖြစ်ပြီး shift ကတော့ ရွှေ့တာကို ဆိုလိုပါတယ်။

binary digit တွေကို ညာဘက်ကို ရွှေ့စေချင်ရင် သုံးပါတယ်။

ညာဘက်ကို ရွှေ့တဲ့အခါ ဘယ်ဘက်စွန်းကို zero ဖြည့်ပေးပါတယ်။

သူ့မှာလည်း ထိုင်ခုံမလောက်တဲ့ ပြသနာ ရှိပါတယ်။

ညာဘက်ကို ထိုင်ခုံ‌တစ်နေရာစာ ရွှေ့ကြရတဲ့အခါ ညာအစွန်လူက ထိုင်ခုံပျောက်ပါလိမ့်မယ်။

################################################

ဒါတွေက ကိုယ်တိုင်တွေးမှ နားလည်တာဖြစ်လို့ ထိုင်ခုံတွေကို မြင်ယောင်ပြီး left shift က ဥပမာအတိုင်း ကျွန်တော့်ကို ပြန်ရှင်းပြပါ။

ရှင်းပြတဲ့ သင်ခန်းစာကို comment မှာ ရေးခဲ့ပေးပါ။

################################################

3. Bitwise AND  ( & )

" I love freedom and wisdom. " ထဲက and နဲ့ အတူတူပါပဲ။

နှစ်ခုလုံးကို တန်ဖိုးထားတယ်ဆိုတာမျိုးပေါ့။

တစ်ခုတစ်လေ မဟုတ်ပဲ အားလုံးကို ရည်ညွှန်းတာမျိုးပါ။

binary digit တွေကို ပေါင်းတဲ့အခါ တန်ဖိုးနှစ်ခုလုံး one ဖြစ်မှသာ one လို့ ယူပါတယ်။

################################################

>>   0010
            &
>>   0011
   ------------------------
>>   0010

ညာဘက်စွန်းက 0 နဲ့ 1 ကို ပေါင်းတဲ့အခါ အားလုံး one မဟုတ်လို့ zero ကို ယူပါတယ်။

ဒုတိယမြောက်နှစ်ကို ပေါင်းတဲ့အခါ အားလုံး one ဖြစ်ကြလို့ 1 လို့ ယူပါတယ်။

ဘယ်အစွန်နှစ်ခုကတော့ တစ်ခုမှ one မဖြစ်လို့ zero ပဲ ယူပါတယ်။

ဒါကြောင့် 0010 နဲ့  0011 ကို AND operation လုပ်တဲ့အခါ 0010 ရပါမယ်။

################################################

ဘာကြောင့် ဒီလိုရလဲဆိုတော့ လျှပ်စီးပတ်လမ်းထဲမှာ input နှစ်ခုလုံးကနေ လျှပ်စစ်ဝင်လာမှသာ output အဖြစ် လျှပ်စစ်ပြန်ထွက်မယ်ဆိုတာမျိုး ဖန်တီးထားတာကြောင့်ပါ။

တံခါးကို သော့နှစ်ခုတွဲပြီး ခတ်ထားသလိုပေါ့။

သော့အားလုံးပွင့်မှသာ တံခါးဖွင့်လို့ ရပါမယ်။

ဒါကြောင့် အလွယ်မှတ်ချင်ရင် all လို့ မှတ်ထားနိုင်ပါတယ်။

################################################

4. Bitwise OR  ( | )

" Please give me an apple or a banana. " ထဲက or နဲ့ အတူတူပါပဲ။

တစ်ခုတစ်လေ ပေးလိုက်ရုံနဲ့တင် ကျေနပ်သွားမှာဖြစ်သလို နှစ်ခုလုံးပေးလိုက်လို့လည်း စိတ်မဆိုးပါဘူး။

binary digit တွေကို ပေါင်းတဲ့အခါ တန်ဖိုးတစ်ခုတစ်လေ one ဖြစ်ရုံနဲ့တင် one လို့ ယူပါတယ်။

################################################

>>   0010
            |
>>   0011
   ------------------------
>>   0011

ညာဘက်စွန်းက 0 နဲ့ 1 ကို ပေါင်းတဲ့အခါ one တစ်ခုပါလို့ one လို့ ယူပါတယ်။

ဒုတိယမြောက်နှစ်ခုမှာ အားလုံး one ဖြစ်ကြချိန်မှာလဲ 1 လို့ပဲ ယူပါတယ်။

ဘယ်အစွန်နှစ်ခုကတော့ တစ်ခုမှ one မဖြစ်လို့ zero ပဲ ယူပါတယ်။

ဒါကြောင့် 0010 နဲ့  0011 ကို OR operation လုပ်တဲ့အခါ 0011 ရပါမယ်။

################################################

ဘာကြောင့် ဒီလိုရလဲဆိုတော့ လျှပ်စီးပတ်လမ်းထဲမှာ input တစ်ခုခုကနေ လျှပ်စစ်ဝင်လာရုံနဲ့ output အဖြစ် လျှပ်စစ်ပြန်ထွက်မယ်ဆိုတာမျိုး ဖန်တီးထားတာကြောင့်ပါ။

သော့ခလောက်တစ်ခုတည်းကို သော့နှစ်ချောင်းပွားထားသလိုပါပဲ။

ဘယ်သော့နဲ့ဖွင့်ဖွင့် ပွင့်ပါတယ်။

ဒါကြောင့် အလွယ်မှတ်ချင်ရင် any လို့ မှတ်ထားနိုင်ပါတယ်။
   
################################################

5. Bitwise XOR ( ^ )

XOR ဆိုတာက Exclusive OR ဖြစ်ပါတယ်။

Exclusive ဆိုတာက အထူးသီးသန့်ပါ။

Exclusive OR ဆိုတော့ OR သီးသန့်ပေါ့။

OR ကို  တစ်ခုတစ်လေလို့ မှတ်ခဲ့မယ်ဆိုရင် Exclusive OR ဆိုတာက တစ်ခုတစ်လေကိုပဲ လက်ခံမယ်လို့ အဓိပ္ပါယ်ရပါတယ်။

################################################

မုန့်တောင်းစားတဲ့ ဥပမာကို ပြန်သွားရရင်

" Please give me an apple or a banana. "  ဆိုပြီး 

သစ်သီးတောင်းတဲ့အခါ တစ်လုံးပဲယူမယ်လို့ ပြောတာမျိုးပါ။

ရွဲ့ပြီး အကုန်ပေးရင်တော့ မယူနိုင်ဘူးဆိုတာမျိုးပေါ့။

ရွဲ့ပြီး မောင်ပဲအကုန်စားလိုက်တော့ဆိုရင် ပျာပျာသလဲငြင်းရသလိုမျိုးပါပဲ။

binary digit တွေကို တစ်ခုချင်းစီပေါင်းတဲ့အခါ တန်ဖိုးတစ်ခုတစ်လေ one ဖြစ်မှသာ one လို့ ယူပါတယ်။

အားလုံး one ဖြစ်ရင် ငြင်းပါတယ်။

>>   0010
            ^
>>   0011
   ------------------------
>>   0001

ညာဘက်စွန်းက 0 နဲ့ 1 ကို ပေါင်းတဲ့အခါ one တစ်ခုပဲပါလို့ one လို့ ယူပါတယ်။

ဒုတိယမြောက်နှစ်ခုမှာ အားလုံး one ဖြစ်ကြချိန်မှာ‌တော့ ငြင်းပါတယ်။

ဘယ်အစွန်နှစ်ခုကတော့ တစ်ခုမှ one မဖြစ်လို့ zero ပဲ ယူပါတယ်။

ဒါကြောင့် 0010 နဲ့  0011 ကို XOR operation လုပ်တဲ့အခါ 0001 ရပါမယ်။

################################################

ဘာကြောင့် ဒီလိုရလဲဆိုတော့ လျှပ်စီးပတ်လမ်းထဲမှာ input တစ်ခုတည်းကပဲ လျှပ်စစ်ဝင်လာမှသာ output အဖြစ် လျှပ်စစ်ပြန်ထွက်မယ်ဆိုတာမျိုး ဖန်တီးထားတာကြောင့်ပါ။

ချိန်ခွင်လိုမျိုးပေါ့။

တစ်ဖက်ဖက်က အလေးသာမှသာ စောင်းသွားပါလိမ့်မယ်။

ဒါကြောင့် အလွယ်မှတ်ချင်ရင် " or သီးသန့် " လို့ မှတ်ထားနိုင်ပါတယ်။
  
################################################

6. Bitwise NOT ( ~ )

not ဆိုတာက အငြင်းပြစကားပါ။

binary digit ကို ဆန့်ကျင်ဘက်ပြောင်းဖို့ ‌သုံးပါတယ်။

zero ကို one အဖြစ် ၊ one ကို zero အဖြစ် ပြောင်းပေးပါတယ်။

0011 ကို ဆန့်ကျင်ဘက်ပြောင်းရင် 1100 ရပါမယ်။

နှိပ်တဲ့ ဘောပင်လိုမျိုးပါပဲ။

နှိပ်လိုက်တဲ့အခါ ပိတ်ထားရင် ပွင့်မှာဖြစ်ပြီး ဖွင့်ထားရင်တော့ ပိတ်သွားမှာဖြစ်ပါတယ်။

ခလုတ်နှိပ်တိုင်းမှာ အပိတ်နဲ့ အဖွင့်က တစ်လှည့်စီ ဖြစ်ပါမယ်။

normally open လိုမျိုး ဘာမှ မသက်ရောက်ရင် အလိုလိုပွင့်ပြီး လျှပ်စစ်ပေးခဲ့ရင် ပိတ်မယ်ဆိုတာမျိုးလည်း ဖြစ်ပါလိမ့်မယ်။

################################################
################################################

အခုလက်ရှိမှာ arithmetic operators ကိုးမျိုးနဲ့ bitwise operators ခြောက်မျိုးကို သင်ခဲ့ပြီးပါပြီ။

e
u
မြှောက် စား
ပေါင်း နှုတ် 
shift 
and
or နှစ်ခု 

ဒါကို မှတ်ထားခဲ့ရင် 15 ခုလုံးကို အလွတ်ရပါပြီ။

################################################

operator precedence  နဲ့ပတ်သတ်ပြီး သင်ပြီးသလောက်ကို အနှစ်ချုပ်ရရင် အတိုကောက်မှာ နားပြီး ရွတ်ရမှာတွေက အဆင့်တွေပါပဲ။

ခုလိုမျိုး ရှစ်ဆင့်ရှိပါတယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

################################################

သတိထားရမှာက 

bitwise NOT က precedence မှာ အဆင့်နှစ်ဖြစ်သလို unary operator လည်းဖြစ်လို့ အတိုကောက်ထဲက u ဟာ unary operator သုံးခုကို ဆိုလိုတယ်လို့ သိထားရပါမယ်။

or နှစ်ခုဆိုရင်လည်း exclusive OR နဲ့ OR လို့ သိရပါမယ်။

သူတို့နှစ်ခုကတော့ အဆင့်မတူကြပါဘူး။

XOR က အဆင့်ပိုမြင့်ပါတယ်။

################################################

အခုဆက်ပြီးသင်ရမှာကတော့ ကိုးဆင့်မြောက်ဖြစ်တဲ့ Comparison Operators တွေပဲ ဖြစ်ကြပါတယ်။

သူကလည်း bitwise operators တွေလိုပဲ ‌အရေအတွက် ခြောက်ခုရှိပါတယ်။

################################################

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)

comparison ဆိုတာက နှိုင်းယှဉ်တာကို ပြောတာပါ။

တန်ဖိုးတွေကို နှိုင်းယှဉ်ဖို့ သုံးပါတယ်။

နှိုင်းယှဉ်တဲ့အခါ မှန်ရင် True ကို ထုတ်ပေးပြီး မမှန်ရင်တော့ False ကို ထုတ်ပေးပါတယ်။

################################################

တန်ဖိုး တူ / မတူ နှိုင်းယှဉ်ချင်ရင် == နဲ့ != ကို သုံးနိုင်ပါတယ်။

equal နဲ့ not equal လို့ မှတ်ထားနိုင်ပါတယ်။

################################################

10 == 100

10 နဲ့ 100 တူတယ်လို့ ရေးခဲ့ရင် မှားလို့ False ဖြစ်ပါမယ်။

ဖတ်တဲ့အခါ " 10 is equal to 100. " လို့ ဖတ်နိုင်ပါတယ်။

################################################

10 != 100

10 နဲ့ 100 မတူဘူးလို့ ရေးခဲ့ရင် မှန်လို့ True ဖြစ်ပါမယ်။

ဖတ်တဲ့အခါ " 10 is not equal to 100. " လို့ ဖတ်နိုင်ပါတယ်။

################################################

တန်ဖိုးတွေကို အကြီး / အငယ် နှိုင်းယှဉ်ချင်ရင် greater than နဲ့ less than ကို သုံးနိုင်ပါတယ်။

################################################

10 > 100

" 10 is great than100. " လို့ ရေးခဲ့ရင် မှားလို့ False ဖြစ်ပါမယ်။

################################################

10 < 100

" 10 is less than100. " လို့ ရေးခဲ့ရင် မှန်လို့ True ဖြစ်ပါမယ်။

################################################

နောက်နှစ်ခုကတော့ equal နဲ့ အကြီး/ အငယ်ကို ပေါင်းထားပါတယ်။

################################################

greater than or equal ( >= )

10 >= 100 

" 10 is great than or equal to 100. " လို့ ရေးခဲ့ရင်

10 ဟာ 100 ထက် မကြီးသလို တန်ဖိုးလည်း မတူညီကြသဖြင့်

နှစ်ခုလုံးမှားလို့ False ဖြစ်ပါမယ်။

################################################

less than or equal ( <= )

10 <= 100 

" 10 is less than or equal to 100. " လို့ ရေးခဲ့ရင်

10 နဲ့ 100 ဟာ တန်ဖိုးတွေ မတူညီကြပေမယ့် 

10 က ပိုငယ်တယ်ဆိုတာကတော့ မှန်နေတာဖြစ်လို့

True  ဖြစ်ပါမယ်။

################################################

equal နဲ့ အကြီး/ အငယ်ကို ပေါင်းထားတာက တစ်ခုမှန်ရင် လက်ခံတာမျိုးပါ။

################################################

precedence အနေနဲ့တော့ comparison operators ခြောက်ခုလုံးက အဆင့်အတူတူပါပဲ။

ကိုးဆင့်မြောက်မှာ ရှိကြပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (Unary positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 
shift 
and
or နှစ်ခု
C

C ဆိုတာက comparison operators တွေကို ပြောတာ ဖြစ်ပါတယ်။

################################################

မှတ်စုကို နားလည်ခဲ့မယ်ဆိုရင် precedence ကိုးဆင့်နဲ့ operator 21 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

################################################
################################################

Identity Operators (is, is not)   (memory address)

identity document လို့ ခေါ်တဲ့ ID နံပါတ်တွေ တူ / မတူ နှိုင်းယှဉ်ဖို့ သုံးပါတယ်။

computer မှာတော့ memory address တွေကို id လိုမျိုး ယူဆကြပါတယ်။

################################################

is

အတူတူဖြစ်ပြီး တစ်ခုတည်းလို့ အဓိပ္ပါယ်ရပါတယ်။

x is y လို့ ရေးတဲ့အခါ x ထဲမှာ မှတ်သားထားတဲ့ လိပ်စာနဲ့ y ထဲက လိပ်စာတူနေခဲ့ရင် True ကို ထုတ်ပေးပါမယ်။

မတူရင်တော့ False ပေါ့။

################################################

မြင်သာအောင်ပြောရရင် သန့်စင်နဲ့ ဟိန်းကိုဆိုပြီး ကျွန်တော် တစ်ယောက်တည်းမှာ အမည်နှစ်ခု ရှိနေတာမျိုးပါ။

" Thant Sin is Hein Ko. " ဆိုရင် ဒီအမည်နှစ်ခုက  လူတစ်ယောက်တည်းပဲလို့ ပြောလိုက်တာမျိုးပါ။

တကယ်ပဲ တစ်ယောက်တည်းဖြစ်နေခဲ့ရင် True ပေါ့။

################################################

Python မှာကြတော့ object တစ်ခုတည်းပဲလားဆိုပြီး စစ်ဖို့အတွက် သုံးပါတယ်။

x is y ဆိုရင် x နဲ့ y ဟာ အရာဝတ္ထု တစ်ခုတည်းရဲ့ အမည်တွေပါလို့ ပြောလိုက်တာမျိုးပါ။

################################################

is not

x is not y ဆိုရင် x နဲ့ y က အတူတူ မဟုတ်ဘူးလို့ ပြောလိုက်တာပါ။

လိပ်စာမတူခဲ့ရင် တစ်နည်းအားဖြင့် ID မတူခဲ့ရင် True ကို ထုတ်ပေးမှာဖြစ်ပြီး တူနေခဲ့ရင်တော့ False ကို ထုတ်ပေးမှာ ဖြစ်ပါတယ်။

################################################

တစ်ခုသတိထားရမှာက 

comparison operators  ထဲက equal နဲ့ not equal က တန်ဖိုးတွေကို နှိုင်းယှဉ်တာ ဖြစ်ပြီး 

identity operator ထဲက is နဲ့ is not ကတော့ memory address တွေကို နှိုင်းယှဉ်ပေးပါတယ်။

အသေးစိတ်ကိုတော့ program ရေးပြီဆိုမှပဲ ထပ်ဖြည့်ပေးပါ့မယ်။

################################################
################################################

Membership Operators ( in , not in )

membership ဖြစ်/မဖြစ် စစ်ဖို့ သုံးပါတယ်။

################################################

သစ်သီးစာရင်းထဲမှာ ပန်းသီးပါလားစစ်ချင်ရင် ဒီလိုရေးနိုင်ပါတယ်။

"apple" in fruits

ပန်းသီးပါခဲ့ရင် True ကို ထုတ်ပေးမှာဖြစ်ပြီး ပန်းသီးမပါရရင်တော့ False ဖြစ်ပါမယ်။

not in ကြတော့ ဆန့်ကျင်ဘက် ဖြစ်ပါမယ်။

################################################

နောက်တစ်နည်းနဲ့ ထပ်ရှင်းပြပေးပါ့မယ်။

"apple" in fruits

သစ်သီးစာရင်းထဲမှာ ပန်းသီးပါတယ်လို့ ရေးလိုက်တာပါ။

မှန်ခဲ့ရင် True ကို ထုတ်ပေးမှာဖြစ်ပြီး မမှန်ရင်တော့ False ဖြစ်ပါမယ်။

################################################

"apple" not in fruits

သစ်သီးစာရင်းထဲမှာ ပန်းသီးမပါဘူးလို့ ရေးလိုက်တာပါ။

မှန်ခဲ့ရင် True ကို ထုတ်ပေးမှာဖြစ်ပြီး မမှန်ရင်တော့ False ဖြစ်ပါမယ်။

################################################

Comparison Operators (Compare values)(6)
   Equal to           --->   ==
   Not equal to       --->   !=
   Greater than       --->   >
   Less than          --->   <
   Greater than or equal to   --->   >=
   Less than or equal to      --->   <=

Identity Operators (Compare memory locations)
   Identical objects          --->   is
   Not identical objects      --->   is not

Membership Operators (Test for membership in sequences)
   Present in the sequence    --->   in
   Not present in the sequence --->   not in

အထက်ပါ ဆယ်ခုလုံးဟာ ဦးစားပေးအဆင့် 9 ဖြစ်ကြပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (Unary positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)
    Identity Operators (is , is not) 
    Membership Operators  (in , not in)

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 
shift 
and
or နှစ်ခု
C

C ဆိုတာက comparison, identity , membership စတဲ့ operators တွေကို ပြောတာ ဖြစ်ပါတယ်။

################################################

မှတ်စုကို နားလည်ခဲ့မယ်ဆိုရင် precedence ကိုးဆင့်နဲ့ operator 25 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

################################################
################################################

Logical Operators

logic value လို့ ခေါ်တဲ့ True , False တန်ဖိုးနှစ်ခုနဲ့ သက်ဆိုင်တဲ့ operators  တွေဆိုပြီး မှတ်ထားနိုင်ပါတယ်။

################################################

Logical NOT (not)

condition တွေကို ဆန့်ကျင်ဘက်အဖြစ် ပြောင်းလဲပေးပါတယ်။

bitwise not နဲ့ အတူတူပါပဲ။

bitwise not က binary digit တန်ဖိုးဖြစ်တဲ့ zero နဲ့ one တွေကို ဆန့်ကျင်ဘက် ပြောင်းပေးပြီး

logical not ကတော့ logical တန်ဖိုးဖြစ်တဲ့ True နဲ့ False ကို ဆန့်ကျင်ဘက် ပြောင်းပေးပါတယ်။

not True ဆိုရင် False ရပါမယ်။

not False ဆိုရင် True ရပါမယ်။

################################################

Logical AND (and)

bitwise and နဲ့ အတူတူပါပဲ။

တံခါးတစ်ခုတည်းကို သော့နှစ်လုံး ခတ်ထားသလိုမျိုးပါပဲ။

True and True ဆိုပြီး နှစ်ခုလုံး True ဖြစ်မှသာ True ရပါမယ်။

################################################

Logical OR  (or)

bitwise or နဲ့ အတူတူပါပဲ။

False or True ဆိုတာမျိုး True တစ်ခုပါရုံနဲ့ True ရပါမယ်။

################################################

precedence အရ not, and, or က 10, 11, 12 ဖြစ်ကြပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)
    Identity Operators (is , is not) 
    Membership Operators  (in , not in)

10.Logical NOT        --->   not
11.Logical AND        --->   and
12.Logical OR         --->   or

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 
shift 
and
or နှစ်ခု
C
not
and
or

################################################

မှတ်စုကို နားလည်ခဲ့မယ်ဆိုရင် precedence 12 ဆင့်နဲ့ operator 28 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

################################################
################################################

Ternary operator 

ternary ဆိုတာ မြန်မာလို သုံးခုလို့ အဓိပ္ပါယ်ရပါတယ်။

left, middle, right ဆိုပြီး operand အစိတ်အပိုင်း သုံးခုပါတဲ့ operator ဖြစ်ပါတယ်။

middle operand ရဲ့ အခြေအနေပေါ်မူတည်ပြီး တန်းဖိုးနှစ်ခုထဲက တစ်ခုကို ရွေးချယ်ပေးပါတယ်။

################################################

middle operand က True ဖြစ်ခဲ့ရင် left operand ကို ရွေးမှာ ဖြစ်ပြီး False ဖြစ်ခဲ့ရင်တော့ right operand ကို ရွေးမှာဖြစ်ပါတယ်။

################################################

နံပါတ်နှစ်ခုထဲက ပိုကြီးတဲ့ နံပါတ်ကို ရွေးချင်ရင် ဒီလိုရေးနိုင်ပါတယ်။

greater_number = a if a > b else b

a ဟာ b ထက်ကြီးရင် a ကို ယူမယ်လို့ ရေးလိုက်တာပါ။

################################################

အလုပ်လုပ်ပုံကို ရှင်းပြရရင် 

ပထမနံပါတ်ဟာ ဒုတိယနံပါတ်ထက် ကြီးခဲ့ရင် 

a ဟာ b ထက်ကြီးခဲ့ရင် a if True else b ဖြစ်သွားပါမယ်။

middle operand က True ဖြစ်လို့ ဘယ်ဘက်က a ကို ယူပါတယ်။

ပိုကြီးတဲ့ တန်ဖိုးရပါမယ်။

################################################

a ဟာ  b ထက် မကြီးခဲ့ရင် a if False else b ဖြစ်သွားပါမယ်။

middle operand က False ဖြစ်လို့ ညာဘက်က b ကို ယူပါတယ်။

ပိုကြီးတဲ့ တန်ဖိုးရပါမယ်။

################################################

ပိုငယ်တဲ့ တန်ဖိုး လိုချင်ရင်တော့ 

1. a နဲ့ b ကို နေရာလဲလို့ ရပါတယ်။

less_number = b if a > b else a

a ကပိုကြီးရင် b ကို ယူမယ်လို့ အဓိပ္ပါယ်ရပါတယ်။

2. middle operand ကို less than အဖြစ် ပြင်လို့ ရပါတယ်။

less_number = a if a < b else b

a က ငယ်ရင် a ကို ယူမယ်လို့ အဓိပ္ပါယ်ရပါတယ်။

ရေးချင်သလို ရေးလိုက်လိုရပေမယ့် ပထမနည်းက အဓိပ္ပါယ်မရှိလို့ မှတ်ရလွယ်တဲ့ ဒုတိယနည်းကိုပဲ သုံးကြပါတယ်။

################################################

အခြေအနေပေါ်မူတည်ပြီး အလုပ်လုပ်တာဖြစ်လို့ conditional operator လို့လည်း ခေါ်ကြပါတယ်။

if နဲ့ else ပါလို့ if else operator လို့လည်း ခေါ်ကြပါတယ်။

################################################

precedence သတ်မှတ်ချက်မှာ အဆင့် 13 ဖြစ်ပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)
    Identity Operators (is , is not) 
    Membership Operators  (in , not in)

10.Logical NOT        --->   not
11.Logical AND        --->   and
12.Logical OR         --->   or
13. Ternary operator    --->  operand_1 if operand_3 else operand_2

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 
shift 
and
or နှစ်ခု
C
not
and
or
T

T က ternary operator ဖြစ်ပါတယ်။

################################################

အတိုကောက်ကို နားလည်ခဲ့မယ်ဆိုရင် precedence 13 ဆင့်နဲ့ operator 29 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

################################################
################################################

Assignment Operators ( = )

assignment ဆိုတာက တစ်ခုခုပေးတာကို ပြောတာပါ။

တန်ဖိုးသတ်မှတ်ပေးတဲ့ operators တွေလို့ ယူဆနိုင်ပါတယ်။

assignment operators က စုစုပေါင်း ဆယ့်သုံးခုရှိပါတယ်။

################################################

1. Simple assignment ( = )

x = 5 ဆိုရင် "x is assigned 5" လို့ ဖတ်နိုင်ပါတယ်။

x ရဲ့ တန်ဖိုးက 5 ဖြစ်တယ်ဆိုတာမျိုးပါ။

ဒါမှမဟုတ်လည်း x ဟာ 5 ကို ကိုယ်စားပြုတယ်ဆိုတာမျိုးပေါ့။

################################################

2. Add and assign ( += )

x += 1

x ရဲ့ တန်ဖိုးအဟောင်းကို တစ်ပေါင်းပြီး ရလာတဲ့တန်ဖိုးအသစ်ကို x ကိုပဲ ပြန်ပေးမယ်ဆိုတာမျိုးပါ။

additional operator နဲ့ assignment operator ဒီနှစ်ခုကို ပေါင်းပြီးရေးလိုက်တာပါ။

ဖတ်တဲ့အခါ နှစ်မျိုး ဖတ်နိုင်ပါတယ်။

1. "Add 1 to x and assign the result back to x." 

2. " x add and assign 1. "

################################################

3. Subtract and assign ( -= )

တန်ဖိုးအဟောင်းကို နှုတ်ပြီး ရလာတဲ့ ရလဒ်ကို assign ပြန်လုပ်တာပါ။

################################################

ကျန်တာတွေလည်း အတူတူပဲဖြစ်လို့ မရေးတော့ပါဘူး။

စုစုပေါင်း ဆယ့်သုံးခုရှိပါတယ်။

1. Simple assignment ( = )
2. Add and assign ( += )
3. Subtract and assign ( -= )
4. Multiply and assign ( \*= )
5. Divide and assign ( /= )
6. Floor divide and assign ( //= )
7. Modulus and assign ( %= )
8. Exponent and assign ( \*\*= )
9. Bitwise AND and assign ( &= )
10. Bitwise OR and assign ( |= )
11. Bitwise XOR and assign ( ^= )
12. Right shift and assign ( >>= )
13. Left shift and assign ( <<= )

################################################

အနှစ်ချုပ်ရရင်

arithmetic operators ကိုးခုနဲ့ bitwise operators ခြောက်ခု စုစုပေါင်း ဆယ့်ငါးခုရှိပါတယ်။

unary minus, unary plus, bitwise not အစရှိတဲ့ unary operator သုံးခုကို ဖယ်လိုက်ရင် binary operator 12 ခု ကျန်ပါတယ်။

ဒီ 12 ခုကို assignment operator နဲ့ တွဲသုံးတဲ့အခါ ပေါင်းစပ်ထားတဲ့ assignment operator 12 ခု ရလာပါတယ်။

ရိုးရိုး assignment operator က တစ်ခုဆိုတော့ စုစုပေါင်းအရေအတွက်က 13 ခုဖြစ်သွားပါတယ်။

ရှေ့သင်ခန်းစာတွေကိုသာ ကျေညက်ခဲ့ရင် 13 ခုလုံးကို  အလိုလို ရပါတယ်။

################################################

precedence သတ်မှတ်ချက်မှာ အဆင့် 14 ဖြစ်ပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)
    Identity Operators (is , is not) 
    Membership Operators  (in , not in)

10.Logical NOT        --->   not
11.Logical AND        --->   and
12.Logical OR         --->   or
13. Ternary operator    --->  operand_1 if operand_3 else operand_2
14. Assignment operators (=) (13)

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 

shift 
and
or နှစ်ခု

C
not
and
or

T
assignment 

assignment က assignment operator 13 ခု ဖြစ်ပါတယ်။

################################################

အတိုကောက်ကို နားလည်ခဲ့မယ်ဆိုရင် precedence 14 ဆင့်နဲ့ operator 42 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

################################################
################################################

25. Walrus operator ( := )  (  🦭 )

အာတိတ်က ပင်လယ်ဖျံနဲ့တူလို့ walrus operator လို့ ခေါ်ကြတာဖြစ်ပါတယ်။

assign and use လို့ ဖတ်နိုင်ပါတယ်။

တန်ဖိုးတွေကို အသုံးပြုနေရင်းနဲ့ တစ်ခါတည်း assign လုပ်သွားတာမျိုးပါ။

################################################

အသေးစိတ်ကို list comprehension သင်တဲ့အခါ ရှင်းပြပေးပါ့မယ်။

################################################

precedence သတ်မှတ်ချက်မှာ အဆင့် 15 ဖြစ်ပါတယ်။

################################################

ပြန်ပေါင်းလိုက်ရင် ခုလိုရပါမယ်။

1. Exponentiation ( **  )
2. Unary Operators (+, -, ~) (positive, negative, bitwise NOT) 
3. Multiplication, Division, Modulus, Floor Division (*, /, %, //) 
4. Addition and Subtraction (+, -) 

5. Bitwise Shift Operators  (<<, >>) 
6. Bitwise AND (&)    all
7. Bitwise XOR (^)    only any
8. Bitwise OR (|)        any

9. Comparison Operators (==, !=, >, <, >=, <=)   (value)
    Identity Operators (is , is not) 
    Membership Operators  (in , not in)

10.Logical NOT        --->   not
11.Logical AND        --->   and
12.Logical OR         --->   or
13. Ternary operator    --->  operand_1 if operand_3 else operand_2
14. Assignment operators (=) (13)
15. Walrus operator (:=)

################################################

e
u
မြှောက် စား
ပေါင်း နှုတ် 

shift 
and
or နှစ်ခု

C
not
and
or

T
assignment 
walrus 

walrus က walrus operator ဖြစ်ပါတယ်။

################################################

အတိုကောက်ကို နားလည်ခဲ့မယ်ဆိုရင် precedence 15 ဆင့်နဲ့ operator 43 ခုကို အလွတ်ရသွားမှာ ဖြစ်ပါတယ်။

matrix multiplication (@) လိုမျိုး တစ်ခြား operator တွေလည်း ကျန်သေးပေမယ့် built-in operator တွေကတော့ ဒီ 43 ခုပဲ ရှိပါမယ်။

################################################

operator 43 ခုလုံးရဲ့ precedence 15 ဆင့် ကို ရှင်းပြလို့ ပြီးပါပြီ။

နောက်သင်ခန်းစာမှာတော့ associativity ကို ရှင်းပြပေးပါ့မယ်။

################################################
################################################

26. Associativity အနှစ်ချုပ် 

Precedence မှာ အဆင့် 15 ဆင့် ရှိပေမယ့် Associativity မှာတော့ left sided bind နဲ့ right sided bind ဆိုပြီး နှစ်ခုပဲ ရှိပါတယ်။

မသိရင် အခန်း 14 ကို ပြန်ဖတ်ရပါမယ်။

operator 43 ခုမှာ 19 မျိုးက right sided bind ဖြစ်ပြီး ကျန်တာကတော့ left sided bind ဖြစ်ပါတယ်။

################################################

မှတ်ရလွယ်တဲ့ right sided bind ကိုပဲ မှတ်ထားလိုက်ပါ။

ဒါဆိုရင် 43 ခုလုံးရဲ့ associativity ကို သိသွားပါပြီ။

################################################

exponent တစ်ခု ၊ assignment operator 13 ခု ၊ walrus operator တစ်ခုနဲ့ unary operator လေးခု ဒီ 19 မျိုးက right sided bind ဖြစ်ကြပါတယ်။

walrus operator က Python 3.8 မှ အသစ်ထွက်တာဖြစ်သလို့ သုံးလေ့သုံးထ မရှိပါဘူး။

unary operator တွေကလည်း နှစ်ခုထပ်တာ ရှားပါတယ်။ 

unary plus နဲ့ unary minus ဆိုရင် operation လုပ်ပေးတာမဟုတ်ပဲ positive နဲ့ negative သတ်မှတ်ရုံသာဖြစ်လို့ တစ်ချို့တွေက operator စာရင်းထဲတောင် မထည့်ကြပါဘူး။

ဒါကြောင့် exponent နဲ့ assignment နှစ်ခုပဲ မှတ်ထားလိုက်ရင် အဆင်ပြေပါပြီ။

################################################

operator မဟုတ်တဲ့ lambda expression ကိုပါ ထည့်တွက်ရင်တော့ အခု 20 ပေါ့။

function သင်ခန်းစာရောက်မှပဲ သင်ရမှာဖြစ်ပါတယ်။

################################################

right sided bind (16)   ( **, = ) 

1. Exponent (1)

2. Assignment Operators (13)

3. Walrus Operator (1)

4. unary (4)

5.. lambda expression (1)

################################################

left sided bind မှာဆိုရင်လည်း built-in operator က 24 ခုရှိပြီး built-in operator မဟုတ်တဲ့ matrix multiplication (@) ကိုပါ ထည့်တွက်ရင် 25 ခုဖြစ်ပါမယ်။

operator မဟုတ်တဲ့ ဒီငါးခုကလည်း left sided bind ဖြစ်လို့ 30 ဖြစ်သွားပါမယ်။

1. comma ( tuple packing / unpacking )

2. colon ( slicing )

3. [] (indexing)

4. () (function call)

5. dot(attribute access)

################################################

တကယ်တော့ right sided bind ဖြစ်တဲ့ exponent နဲ့ assignment ပဲ မှတ်ထားပါ။

ကျန်တာတွေကတော့ သင်ရင်းနဲ့ သိလာပါလိမ့်မယ်။

################################################

OOP သင်ပြီး‌ရင်လည်း ပိုနားလည်ဖို့ operator တွေကို ကိုယ်တိုင်ဖန်တီးကြပါမယ်။

control flow နဲ့ function သင်ပြီးရင်တော့ OOP ရောက်ပါပြီ။

################################################

Operator သင်ခန်းစာကိုတော့ ဒီမှာပဲ ရပ်လိုက်ပြီး operator စာအုပ်မှပဲ အသေးစိတ်ထပ်ရေးပေးပါ့မယ်။

ရေးတဲ့အဆင့်ကို မရောက်တော့မှာ စိုးလို့ပါ။

################################################

အသိပေးချင်တာက

data type နဲ့ control flow ကို ပိုင်မှသာ function တွေ ရေးနိုင်မှာပါ။

ဒါမှသာ လက်ရှိသင်နေတဲ့ procedural programming ကို လေ့ကျင့်လို့ ရပါမယ်။

################################################

များများလေ့ကျင့်ရင်း ရေးနိုင်ပြီဆိုမှသာ OOP ကို ဆက်ပြီး သင်လို့ ရပါမယ်။

ဘာကြောင့်လဲဆိုတော့ OOP မှာက သင်ရမှာ မဟုတ်တော့ပဲ ဖန်တီးကြရမှာဖြစ်လို့ပါ။

################################################

နောက်တစ်ခုက OOP နဲ့ ကိုယ်တိုင်ဖန်တီးနိုင်မှသာ Python ကို နားလည်မှာပါ။

################################################

အားလုံးက ရှေ့ဆုံးနှစ်ခုနဲ့ ချိတ်ဆက်နေကြတာဖြစ်လို့ အစောပိုင်းသင်ခါစမှာ သေချာလေး အားထည့်ပါ။

################################################

ဖတ်ရလွယ်အောင် အပိုင်းအလိုက်စုပေးထားပါတယ်။

https://www.facebook.com/share/p/1CG1m2Pbjq/

################################################



"""